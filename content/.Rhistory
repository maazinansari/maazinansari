importance(rf_lists$M1) %>% order(decreasing = FALSE)
importance(rf_lists$M1) %>% order(decreasing = TRUE)
importance(rf_lists$M1)
importance(rf_lists$M2) %>% order(decreasing = TRUE)
importance(rf_lists$M2)
names(rf_lists[[1]])
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]]["trn"]],
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]][["trn"]],
mtry = rf_lists[[1]][["mtry"]],
importance = TRUE)
rf_1
importance(rf_1)
varImpPlot(rf_1)
sort(rf_1$importance)
rf_1$importance
importance(rf_1)
idx_1 = importance(rf_1) %>% order(decreasing = TRUE)
rownames(importance(rf_1)
rownames(importance(rf_1))
rownames(importance(rf_1))[idx_1]
rownames(importance(rf_1))
idx_1
rownames(importance(rf_1))[idx_1]
idx_1 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
rownames(importance(rf_1))[idx_1]
names_1 = rownames(importance(rf_1))[idx_1]
describe_column(names_1)
describe_column(names_1) %>% paste
cbind(describe_column(names_1) %>% paste, (importance(rf_1))[idx_1])
View(cbind(describe_column(names_1) %>% paste, (importance(rf_1))[idx_1]))
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
View(cbind(describe_column(names_2) %>% paste, (importance(rf_2))[idx_2]))
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
View(cbind(describe_column(names_2) %>% paste, (importance(rf_2))[idx_2]))
View(cbind(describe_column(names_1) %>% paste, (importance(rf_1))[idx_1]))
varImp(rf_1)
varImpPlot(rf_1)
varImpPlot(rf_1, type = 1)
varImpPlot(rf_2, type = 1)
rf_lists = lapply(model_list[1:2], function(x) x[[7]][["finalModel"]])
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]][["trn"]],
mtry = rf_lists[[1]][["mtry"]],
importance = TRUE)
idx_1 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
names_1 = rownames(importance(rf_1))[idx_1]
View(cbind(describe_column(names_1) %>% paste, (importance(rf_1))[idx_1]))
varImpPlot(rf_1, type = 1)
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
View(cbind(describe_column(names_2) %>% paste, (importance(rf_2))[idx_2]))
varImpPlot(rf_2, type = 1)
par(mfrow = c(1,2))
rf_lists = lapply(model_list[1:2], function(x) x[[7]][["finalModel"]])
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]][["trn"]],
mtry = rf_lists[[1]][["mtry"]],
importance = TRUE)
idx_1 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
names_1 = rownames(importance(rf_1))[idx_1]
varImpPlot(rf_1, type = 1)
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
varImpPlot(rf_2, type = 1)
par(mfrow = c(1,2))
varImpPlot(rf_1, type = 1, main = "Model 1")
varImpPlot(rf_2, type = 1, main = "Model 2")
par(mfrow = c(1,2))
rf_lists = lapply(model_list[1:2], function(x) x[[7]][["finalModel"]])
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]][["trn"]],
mtry = rf_lists[[1]][["mtry"]],
importance = TRUE)
idx_1 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
names_1 = rownames(importance(rf_1))[idx_1]
varImpPlot(rf_1, type = 1, main = "Model 1")
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
varImpPlot(rf_2, type = 1, main = "Model 2")
partialPlot(rf_1, "measure_127_value")
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]], x.var = "measure_127_value")
names_2
describe_column(names_1)
names_1 = rownames(importance(rf_1))[idx_1] %>% paste
names_1 = rownames(importance(rf_1))[idx_1]
describe_column(names_1) %>% paste
varImpPlot(rf_1, type = 1, main = "Model 1")
describe_column(names_1) %>% paste
varImpPlot(rf_1, type = 1, main = "Model 1")
describe_column("measure_63_value")
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]], x.var = "measure_63_value")
names_1
par(mfrow = c(4,3))
for (n in names_1[1:12]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]], x.var = n)
}
names_1[1:12]
n
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]], x.var = n)
tst_trn_list[[1]][["trn"]]
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]][,], x.var = n)
traceback()
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]][,], x.var = n)
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]][,], x.var = "measure_127_value")
par(mfrow = c(4,3))
for (n in names_1[1:12]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]][,], x.var = as.character(n))
}
par(mfrow = c(4,3))
for (n in names_1[1:12]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]], x.var = as.character(n), main = n)
}
par(mfrow = c(4,3))
for (n in names_1[1:12]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n)
}
par(mfrow = c(4,3))
for (n in names_2[1:12]) {
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n)
}
range(CHRData$measure_1_value)
par(mfrow = c(2,3))
for (n in names_2[1:5]) {
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n)
}
importance(rf_2)[,1][[n]]
importance(rf_2)[,1]
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n)
text(importance(rf_2)[,1][[n]])
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n)
text(importance(rf_2)[,1][[n]], add = TRUE)
par(mfrow = c(2,3))
for (n in names_2[1:5]) {
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n,
sub = importance(rf_2)[,1][[n]]
}
par(mfrow = c(2,3))
for (n in names_2[1:5]) {
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n,
sub = importance(rf_2)[,1][[n]])
}
importance(rf_2)
par(mfrow = c(4,3))
for (n in names_1[1:5]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n,
sub = paste("%IncMSE:" ,importance(rf_1)[,1][[n]]))
}
par(mfrow = c(2,3))
for (n in names_2[1:5]) {
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n,
sub = paste("%IncMSE:" ,importance(rf_2)[,1][[n]]))
}
par(mfrow = c(4,3))
for (n in names_1[1:15]) {
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
xlab = n,
sub = paste("%IncMSE:" ,importance(rf_1)[,1][[n]]))
}
install.packages("bookdown")
install.packages("kableExtra")
results = data.frame(describe_column(colnames(CHRData)))
kable(results, format = "latex",
caption = "Table of Variable Descriptions", booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down"))
results = data.frame(describe_column(colnames(CHRData)))
kable(results, format = "latex",
caption = "Table of Variable Descriptions", booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "hold_position", "repeat_header"))
results = data.frame(describe_column(colnames(CHRData)))
kable(results, format = "latex",
caption = "Table of Variable Descriptions", booktabs = TRUE, longtable = TRUE) %>%
kable_styling(latex_options = c("striped", "hold_position", "repeat_header"))
par(mfrow = c(2,3))
for (n in names_2[1:5])
{
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.5,
xlab = n,
sub = paste("%IncMSE:", importance(rf_2)[,1][[n]]))
}
for (n in names_2[1:5])
{
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.5,
xlab = n,
sub = paste("%IncMSE:", importance(rf_2)[,1][[n]]))
}
rf_lists[[1]][["mtry"]]
rf_lists[[2]][["mtry"]]
```{r rfpp2,fig.cap = "Partial Plots for Quartile 2", echo = FALSE}
rf_1 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[1]][["trn"]],
mtry = rf_lists[[1]][["mtry"]],
importance = TRUE)
idx_1 = importance(rf_1)[,1] %>% order(decreasing = TRUE)
names_1 = rownames(importance(rf_1))[idx_1]
#describe_column("measure_63_value")
varImpPlot(rf_1, type = 1, main = "Model for Quartile 1")
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
varImpPlot(rf_2, type = 1, main = "Model for Quartile 2")
rf_2 = randomForest(measure_1_value ~ .,
data = tst_trn_list[[2]][["trn"]],
mtry = rf_lists[[2]][["mtry"]],
importance = TRUE)
idx_2 = importance(rf_2)[,1] %>% order(decreasing = TRUE)
names_2 = rownames(importance(rf_2))[idx_2]
varImpPlot(rf_2, type = 1, main = "Model for Quartile 2")
par(mfrow = c(4,3))
for (n in names_1[1:12])
{
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.5,
xlab = n,
sub = paste("%IncMSE:", importance(rf_1)[,1][[n]]))
}
# setting some default chunk options
# figures will be centered
# code will not be displayed unless `echo = TRUE` is set for a chunk
# messages are suppressed
# warnings are suppressed
knitr::opts_chunk$set(fig.align = "center", echo = FALSE, message = FALSE, warning = FALSE)
library(dplyr) # used for grep
library(gtools) #try commenting out
library(glmnet)
library(caret) # used for training
library(randomForest) # used for training random forest
library(knitr) #used for making tables and graphs
library(kableExtra)
# Setting the seed number
seed_num = 430
# Loading the file to a variable name
CHR17 = "2017CHR_CSV_Analytic_Data.csv"
# Naming the columns for usage in code
col_desc = scan(CHR17, what = "character", sep = ",", nlines = 1)
col_names = scan(CHR17, what = "character", sep = ",", skip = 1, nlines = 1)
# Displaying what the columns look like
head(col_names, 10)
# Read in the data, skipping the first line- the descriptions
CHRData = read.csv(CHR17, skip = 1)
# Get the description for a measure column, use the function below
# describe_column` accepts a vector of names from the data frame (e.g. `"measure_44_value"`). It uses the
# index of the column name in `col_names` to get the corresponding column description from `col_desc`.
describe_column = function(colname, names = col_names, description = col_desc)
{
sapply(colname, function(x) description[grep(x, names, ignore.case = TRUE)]) %>%
unlist(use.names = FALSE)
}
# If countycode is 0, then it is the whole state and we remove those rows
CHRData = CHRData[!CHRData$countycode == 0,]
# List of columns including values
val_cols = grep("_value", col_names, ignore.case = TRUE)
# Only use value columns as predictors, thus only using those columns for modeling
CHRData = CHRData[,val_cols]
# Remove commas in numbers, such as "100,000" to "100000"
CHRData = as.data.frame(gsub(",","", as.matrix(CHRData)))
# Convert all values to numeric
CHRData = data.frame(apply(CHRData, 2, as.numeric))
#Remove Columns with more than 500 NA's (Blanks = NA)
CHRData[CHRData == ""] = NA
CHRData = CHRData[sapply(CHRData, function(y) sum(length(which(is.na(y))))) < 500]
# Omit rows with NA's
CHRData = na.omit(CHRData)
# Best quartile is 1, worst quartile is 4
Quartiles = quantcut(CHRData$measure_1_value, 4)
levels(Quartiles) = as.factor(1:4)
CHRData_1 = CHRData[which(Quartiles == "1"),]
CHRData_2 = CHRData[which(Quartiles == "2"),]
CHRData_3 = CHRData[which(Quartiles == "3"),]
CHRData_4 = CHRData[which(Quartiles == "4"),]
set.seed(seed_num)
# Splitting the data at a common standard of 70% for training and 30% for testing for each quartile
trn_tst_split = function(data)
{
CHRData_obs = nrow(data)
CHRData_idx = sample(CHRData_obs, size = trunc(0.70 * CHRData_obs))
CHRData_trn = data[CHRData_idx,]
CHRData_tst = data[-CHRData_idx,]
return(list(trn = CHRData_trn, tst = CHRData_tst))
}
tst_trn_list = lapply(list(CHRData_1, CHRData_2, CHRData_3, CHRData_4), trn_tst_split)
# 5-fold Cross Validation
control = trainControl(method = "cv", number = 5)
# Scaling the data to be used during training
preprocess = c("center", "scale")
# Training KNN for k = 5, 10, 15, ..., 100
knn_tuning = expand.grid(k = seq(5,100,5))
# List of models obtained for each quartile
model_list = list(M1 = NA, M2 = NA, M3 = NA, M4 = NA)
for(i in seq(1,4))
{
# Linear Regression
set.seed(seed_num)
linear_model_u = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
method = "lm", trControl = control)
set.seed(seed_num)
linear_model_s = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
preProcess = preprocess, method = "lm", trControl= control)
# Elastic Net
set.seed(seed_num)
elastic_model_u = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
method = "glmnet", trControl = control,
tuneLength = 10)
set.seed(seed_num)
elastic_model_s = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
preProcess = preprocess, method = "glmnet", trControl = control,
tuneLength = 10)
# KNN
set.seed(seed_num)
k_near_model_u = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
method = "knn", trControl= control,
tuneGrid = knn_tuning)
set.seed(seed_num)
k_near_model_s = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
preProcess = preprocess, method = "knn", trControl = control,
tuneGrid = knn_tuning)
#Random Forest
set.seed(seed_num)
forest_model_u = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
method = "rf", trControl = trainControl(method = "oob"))
set.seed(seed_num)
forest_model_s = train(measure_1_value ~ ., data = tst_trn_list[[i]][["trn"]],
preProcess = preprocess, method = "rf", trControl = trainControl(method = "oob"))
#Store all these models in the corresponding spot of the model list
model_list[[i]] = list(linear_model_u, linear_model_s, elastic_model_u, elastic_model_s,
k_near_model_u, k_near_model_s, forest_model_u, forest_model_s)
}
for (n in names_2[1:5])
{
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.75,
xlab = n,
sub = paste("%IncMSE:", importance(rf_2)[,1][[n]]))
}
for (n in names_2[1:5])
{
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.75,
xlab = n,
sub = paste("%IncMSE:", importance(rf_2)[,1][[n]]))
}
par(mfrow = c(4,3))
for (n in names_1[1:12])
{
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.75,
xlab = n,
sub = paste("%IncMSE:", importance(rf_1)[,1][[n]]))
}
par(mfrow = c(2,3))
for (n in names_2[1:5])
{
partialPlot(rf_2, pred.data = tst_trn_list[[2]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.75,
xlab = n,
sub = paste("%IncMSE:", importance(rf_2)[,1][[n]]))
}
par(mfrow = c(4,3))
for (n in names_1[1:12])
{
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.85,
xlab = n,
sub = paste("%IncMSE:", importance(rf_1)[,1][[n]]))
}
par(mfrow = c(4,3))
for (n in names_1[1:12])
{
partialPlot(rf_1, pred.data = tst_trn_list[[1]][["trn"]],
x.var = as.character(n),
main = describe_column(n),
cex.main = 0.85,
xlab = n,
sub = paste("%IncMSE:", importance(rf_1)[,1][[n]]))
}
include_graphics("img/Q1importance.png")
ls()[1]
ls()
ls()[80]
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
library(knitr)
library(kableExtra)
library(magrittr)
inline_hook <- function(x) {
if (is.numeric(x)) {
format(x, digits = 5)
} else x
}
opts_chunk$set(cache = FALSE)
knit_hooks$set(inline = inline_hook)
read_chunk("HundredYrFlood.R")
source("HundredYrFlood.R")
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
library(knitr)
library(kableExtra)
library(magrittr)
inline_hook <- function(x) {
if (is.numeric(x)) {
format(x, digits = 5)
} else x
}
opts_chunk$set(cache = FALSE)
knit_hooks$set(inline = inline_hook)
read_chunk("HundredYrFlood.R")
source("HundredYrFlood.R")
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
legend("topleft", lty = 3, col = c("red", "blue"))
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
legend("topleft", legend = c("MLE", "MOM"), lty = 3, col = c("red", "blue"))
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
legend("topleft", legend = c("MLE", "MOM"), lty = 1, col = c("red", "blue"), border = 0)
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
legend("topleft", legend = c("MLE", "MOM"), lty = 1, col = c("red", "blue"), fill = 0)
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
par(mfrow = c(1,2))
time_plot_v(floods[["discharge"]], v = c(v_mle, v_mom), col = c("red", "blue"))
legend("topleft", legend = c("MLE", "MOM"), lty = 1, col = c("red", "blue"), bty = "n")
lnorm_plot_v(mu_hat, sigma_hat, v_mle, "red")
lnorm_plot_v(mu_hat, sigma_tilde, v_mom, "blue", add = TRUE)
hist(floods[["discharge"]], nclass = 25, freq = FALSE, xlab = "discharge", main = "")
lnorm_plot_v(mu = mu_hat, sigma = sigma_hat, col = "red", add = TRUE)
lnorm_plot_v(mu = mu_tilde, sigma = sigma_tilde, col = "blue", add = TRUE)
source('~/maazinansari/content/knitpages.R')
setwd(dir = "maazinansari/content/")
knit_folder("~/Dropbox/Sandbox/R/Flood/")
KnitPost("~/Dropbox/Sandbox/R/Flood/HundredYrFlood1.Rmd", outfile = "posts/HundredYrFlood1.md", figsfolder = "static/", cachefolder = "_cache")
